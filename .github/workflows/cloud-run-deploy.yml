name: Build and Deploy to Cloud Run (Artifact Registry)

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  # Repository variables (Settings → Secrets and variables → Actions → Variables)
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION || 'europe-west4' }}
  CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE || 'app-service' }}
  WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
  SERVICE_ACCOUNT_EMAIL: ${{ vars.SERVICE_ACCOUNT_EMAIL }}
  AR_REPOSITORY: ${{ vars.AR_REPOSITORY || 'bot-images' }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false
          clean: true

      - name: Resolve configuration
        id: cfg
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"      # e.g., owner/repo
          REF_NAME="${{ github.ref_name }}"    # branch or tag name
          TAG="${REF_NAME:-main}"

          PROJECT="${GCP_PROJECT_ID}"
          REGION="${GCP_REGION}"
          SERVICE="${CLOUD_RUN_SERVICE}"

          if [ -z "${PROJECT}" ]; then echo "::error::GCP_PROJECT_ID is not set"; exit 1; fi

          AR_HOST="${REGION}-docker.pkg.dev"
          AR_IMAGE="${AR_HOST}/${PROJECT}/${{ env.AR_REPOSITORY }}/${REPO}:${TAG}"

          echo "project=${PROJECT}" >> "$GITHUB_OUTPUT"
          echo "region=${REGION}" >> "$GITHUB_OUTPUT"
          echo "service=${SERVICE}" >> "$GITHUB_OUTPUT"
          echo "ar_host=${AR_HOST}" >> "$GITHUB_OUTPUT"
          echo "ar_image=${AR_IMAGE}" >> "$GITHUB_OUTPUT"

      # Authenticate to Google Cloud (WIF preferred)
      - name: Validate WIF inputs
        run: |
          set -euo pipefail
          if [ -z "${WORKLOAD_IDENTITY_PROVIDER:-}" ] || [ -z "${SERVICE_ACCOUNT_EMAIL:-}" ]; then
            echo "::error::WORKLOAD_IDENTITY_PROVIDER and SERVICE_ACCOUNT_EMAIL must be set as Actions variables."
            exit 1
          fi

      - name: Auth via Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker "${{ steps.cfg.outputs.ar_host }}" --quiet

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to Artifact Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.cfg.outputs.ar_image }}
          provenance: false

      - name: Deploy to Cloud Run
        env:
          IMAGE_URI: ${{ steps.cfg.outputs.ar_image }}
          ADMINS: ${{ vars.ADMINS }}
          BASE_URL: ${{ vars.BASE_URL }}
          USE_WEBHOOK: ${{ vars.USE_WEBHOOK }}
        run: |
          set -euo pipefail
          PROJECT="${{ steps.cfg.outputs.project }}"
          REGION="${{ steps.cfg.outputs.region }}"
          SERVICE="${{ steps.cfg.outputs.service }}"

          # Validate required non-sensitive repository variables
          if [ -z "${ADMINS:-}" ]; then echo "::error::ADMINS is required (vars)"; exit 1; fi
          if [ -z "${USE_WEBHOOK:-}" ]; then echo "::error::USE_WEBHOOK is required (vars)"; exit 1; fi
          if [ -z "${BASE_URL:-}" ]; then echo "::error::BASE_URL is required (vars)"; exit 1; fi

          # Prepare env file with required non-sensitive vars
          ENV_FILE="$(mktemp)"
          : > "${ENV_FILE}"
          echo "ADMINS: \"${ADMINS}\"" >> "${ENV_FILE}"
          echo "USE_WEBHOOK: \"${USE_WEBHOOK}\"" >> "${ENV_FILE}"
          echo "BASE_URL: \"${BASE_URL}\"" >> "${ENV_FILE}"

          # Always pass build metadata
          echo "GIT_COMMIT: \"${GITHUB_SHA}\"" >> "${ENV_FILE}"

          # Deploy image and non-secret envs; secrets are managed by Terraform on the service
          gcloud run deploy "${SERVICE}" \
            --project "${PROJECT}" \
            --region "${REGION}" \
            --platform managed \
            --image "${IMAGE_URI}" \
            --env-vars-file="${ENV_FILE}"

          echo "Deployed ${SERVICE} in ${REGION} with image ${IMAGE_URI} (secrets managed by Terraform)"

